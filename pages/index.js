import React, { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import styles from "../styles/Home.module.css";
import { IoCloseOutline } from "react-icons/io5";
import { BiLoaderAlt } from "react-icons/bi";

const YOUTUBE_SEARCH_URL = "https://www.googleapis.com/youtube/v3/search";

export async function getStaticProps() {
  const res = await fetch(
    `${YOUTUBE_SEARCH_URL}?key=${process.env.YOUTUBE_API_KEY}&channelId=${process.env.YOUTUBE_CHANNEL_ID}&part=snippet,id&type=video&order=date&maxResults=15`
  );
  const data = await res.json();
  return {
    props: {
      data,
    },
    // revalidate: 60
  };
}

const Home = ({ data }) => {
  const [videoId, setVideoId] = useState();

  const [modal, setModal] = useState(false);
  const [videoLoading, setVideoLoading] = useState(true);
  const openModal = (e) => {
    setModal(!modal);
    //console.log("open modal");
    const videoId = e.currentTarget.getAttribute("data-id");
    setVideoId(videoId);
    //console.log(videoId);
    // return video;
  };
  const closeModal = () => {
    setModal(false);
    //console.log("close modal");
  };
  const spinner = () => {
    setVideoLoading(!videoLoading);
  };

  useEffect(() => {
    //console.log("data", data.items);
  }, [data]);

  useEffect(() => {
    //console.log("videoId", videoId);
  }, [modal]);

  // const errorMessage = data.error.message;
  // console.log("data", errorMessage);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>Youtube Channel with Next.js</h1>

        {modal ? (
          <section className="modal__bg">
            <div className="modal__align">
              {/* <div className="modal__content" modal={modal}> */}
              <div className="modal__content">
                <IoCloseOutline
                  className="modal__close"
                  arial-label="Close modal"
                  onClick={closeModal}
                />
                <div className="modal__video-align">
                  {videoLoading ? (
                    <div className="modal__spinner">
                      <BiLoaderAlt
                        className="modal__spinner-style"
                        // fadeIn="none"
                      />
                    </div>
                  ) : null}
                  <iframe
                    className="modal__video-style"
                    onLoad={spinner}
                    loading="lazy"
                    width="800"
                    height="500"
                    src={`https://www.youtube.com/embed/${videoId}?autoplay=1&mute=0&enablejsapi=1`}
                    title="YouTube video player"
                    frameBorder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowFullScreen
                  ></iframe>
                </div>
              </div>
            </div>
          </section>
        ) : null}

        <section>
          {/* {data.error.message && (
            <>
              <p style={{ color: "red" }}>Error Message</p>
              <p
                class="error-quota"
                dangerouslySetInnerHTML={{ __html: errorMessage }}
              />
            </>
          )} */}
          {data &&
            data.items.map((item, index) => {
              //console.log("item:", {item})
              //console.log("video id:", item.id.videoId)

              //console.log("title:", item.snippet.title)
              const id = item.id.videoId;
              const kind = item.id.kind;
              const title = item.snippet.title;

              const th = item.snippet.thumbnails.high.url;
              const etag = item.etag;
              //console.log("etag:", etag)
              //console.log("id:", id)
              //const {videoId} = item.id.videoId;
              return (
                <div className="loopItem" key={id}>
                  <p>
                    {index}-{title} - Video Id "{id}"
                  </p>
                  <p>
                    <img src={th} />
                  </p>
                  {/* video */}
                  <div style={{ display: "flex" }}>
                    <p>
                      <button onClick={openModal} data-id={id} className="">
                        Open Modal
                      </button>
                    </p>
                    <p>
                      <Link href={`/video/${id}`}>
                        <a>
                          <button>Go to Page</button>
                        </a>
                      </Link>
                    </p>
                  </div>
                  {/* video end */}
                </div>
              );
            })}
        </section>
      </main>

      <footer className={styles.footer}>
        Powered by{" "}
        <span className={styles.logo}>
          <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
        </span>
      </footer>
    </div>
  );
};

export default Home;
